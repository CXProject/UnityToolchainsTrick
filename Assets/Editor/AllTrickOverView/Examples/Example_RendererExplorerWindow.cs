using AllTrickOverView.Core;

namespace AllTrickOverView.Examples
{
    public class Example_RendererExplorerWindow : AExample_Base
    {
        public static TrickOverViewInfo TrickOverViewInfo =
            new TrickOverViewInfo("RendererExplorerWindow",
                "仿官方Light Explorer做的Renderer版.方便统一管理Renderer的设置",
                "EditorWindow",
                "///Ref:\n/// https://github.com/Unity-Technologies/UnityCsReference/blob/e740821767d2290238ea7954457333f06e952bad/Editor/Mono/SceneModeWindows/LightingExplorerWindow.cs\nusing System;\nusing System.Linq;\nusing UnityEditor;\nusing UnityEngine;\nusing UnityEngine.Rendering;\n\npublic interface IRendererExplorerExtension\n{\n    RendererExplorerTab[] GetContentTabs();\n    void OnEnable();\n    void OnDisable();\n}\n\n[EditorWindowTitle(title = \"Renderer Explorer\",icon = \"Lighting\")]\npublic sealed class RendererExplorerWindow : EditorWindow\n{\n    private RendererExplorerTab[] m_TableTabs;\n    private GUIContent[] m_TabTitles;\n    private int m_SelectedTab = 0;\n    Type m_CurrentSRPType = null;\n    IRendererExplorerExtension m_CurrentExplorerExtension = null;\n    static IRendererExplorerExtension s_DefaulExplorerExtension = null;\n\n    [MenuItem(\"Window/Rendering/Renderer Explorer\", false, 2)]\n    static void CreateRendererExplorerWindow()\n    {\n        RendererExplorerWindow window = EditorWindow.GetWindow<RendererExplorerWindow>();\n        window.minSize = new Vector2(500, 250);\n        window.Show();\n    }\n    void OnEnable()\n    {\n        titleContent = new GUIContent();\n        titleContent.text = \"Renderer Explorer\";\n        UpdateTabs();\n        EditorApplication.searchChanged += Repaint;\n        Repaint();\n    }\n\n    void OnDisable()\n    {\n        if (m_TableTabs != null)\n        {\n            for (int i = 0; i < m_TableTabs.Length; i++)\n            {\n                m_TableTabs[i].OnDisable();\n            }\n        }\n\n        if (m_CurrentExplorerExtension != null)\n        {\n            m_CurrentExplorerExtension.OnDisable();\n        }\n\n        EditorApplication.searchChanged -= Repaint;\n    }\n\n    void OnInspectorUpdate()\n    {\n        if (m_TableTabs != null && (int)m_SelectedTab >= 0 && (int)m_SelectedTab < m_TableTabs.Length)\n        {\n            m_TableTabs[(int)m_SelectedTab].OnInspectorUpdate();\n        }\n    }\n\n    void OnSelectionChange()\n    {\n        if (m_TableTabs != null)\n        {\n            for (int i = 0; i < m_TableTabs.Length; i++)\n            {\n                if (i == (m_TableTabs.Length - 1)) // last tab containing materials\n                {\n                    int[] selectedIds = UnityEngine.Object.FindObjectsOfType<MeshRenderer>().Where((MeshRenderer mr) => {\n                        return Selection.instanceIDs.Contains(mr.gameObject.GetInstanceID());\n                    }).SelectMany(meshRenderer => meshRenderer.sharedMaterials).Where((Material m) => {\n                        return m != null && (m.globalIlluminationFlags & MaterialGlobalIlluminationFlags.AnyEmissive) != 0;\n                    }).Select(m => m.GetInstanceID()).Union(Selection.instanceIDs).Distinct().ToArray();\n\n                    m_TableTabs[i].OnSelectionChange(selectedIds);\n                }\n                else\n                    m_TableTabs[i].OnSelectionChange();\n            }\n        }\n\n        Repaint();\n    }\n\n    void OnHierarchyChange()\n    {\n        if (m_TableTabs != null)\n        {\n            for (int i = 0; i < m_TableTabs.Length; i++)\n            {\n                m_TableTabs[i].OnHierarchyChange();\n            }\n        }\n    }\n\n    void OnGUI()\n    {\n        UpdateTabs();\n\n        EditorGUIUtility.labelWidth = 130;\n\n        EditorGUILayout.Space();\n        EditorGUILayout.BeginHorizontal();\n\n        GUILayout.FlexibleSpace();\n        if (m_TabTitles != null)\n            m_SelectedTab = GUILayout.Toolbar(m_SelectedTab, m_TabTitles, \"LargeButton\",GUI.ToolbarButtonSize.FitToContents);\n        GUILayout.FlexibleSpace();\n\n        EditorGUILayout.EndHorizontal();\n        EditorGUILayout.Space();\n\n        EditorGUILayout.BeginHorizontal();\n        if (m_TableTabs != null && (int)m_SelectedTab >= 0 && (int)m_SelectedTab < m_TableTabs.Length)\n            m_TableTabs[(int)m_SelectedTab].OnGUI();\n        EditorGUILayout.Space();\n        EditorGUILayout.EndHorizontal();\n\n        EditorGUILayout.Space();\n    }\n    private System.Type GetSRPType()\n    {\n        System.Type SRPType = null;\n        if (GraphicsSettings.currentRenderPipeline != null)\n        {\n            SRPType = GraphicsSettings.currentRenderPipeline.GetType();\n        }\n        return SRPType;\n    }\n    \n    private void UpdateTabs()\n    {\n        var SRPType = GetSRPType();\n        \n        if (m_CurrentExplorerExtension == null || m_CurrentSRPType != SRPType)\n        {\n            m_CurrentSRPType = SRPType;\n        \n            if (m_CurrentExplorerExtension != null)\n            {\n                m_CurrentExplorerExtension.OnDisable();\n            }\n        \n            m_CurrentExplorerExtension = GetExplorerExtension(SRPType);\n            m_CurrentExplorerExtension.OnEnable();\n        \n            m_SelectedTab = EditorSettings.defaultBehaviorMode == EditorBehaviorMode.Mode2D ? /* 2D Lights */ 1 : /* Lights */ 0;\n        \n            if (m_CurrentExplorerExtension.GetContentTabs() == null || m_CurrentExplorerExtension.GetContentTabs().Length == 0)\n            {\n                throw new ArgumentException(\"There must be atleast 1 content tab defined for the Renderer Explorer.\");\n            }\n            \n            m_TableTabs =  m_CurrentExplorerExtension.GetContentTabs();\n            m_TabTitles = m_TableTabs != null ? m_TableTabs.Select(item => item.title).ToArray() : null;\n        }\n    }\n    private IRendererExplorerExtension GetDefaultExplorerExtension()\n    {\n        if (s_DefaulExplorerExtension == null)\n        {\n            s_DefaulExplorerExtension = new DefaultRendererExplorerExtension();\n        }\n        return s_DefaulExplorerExtension;\n    }\n    //为了适配SRP,暂无用.\n    private IRendererExplorerExtension GetExplorerExtension(System.Type currentSRPType)\n    {\n        if (currentSRPType == null)\n            return GetDefaultExplorerExtension();\n        return GetDefaultExplorerExtension();\n    }\n}",
                "Assets/Editor/Examples/Example_76_RendererExplorer",
                typeof(Example_RendererExplorerWindow),
                picPath : "Assets/Editor/Examples/Example_76_RendererExplorer/Preview_RendererExplorerWindow.png",
                videoPath : "");

        public override TrickOverViewInfo GetTrickOverViewInfo()
        {
            return TrickOverViewInfo;
        }
    }
}
